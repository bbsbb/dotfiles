;;; init.el --- Personalized emacs setup. -*- lexical-binding: t; -*-
;;; Commentary:
;;; Code:
;;; Style
;;; -- Use list of cons instead of single cons for consitent alignment.

;;==========================
;; Prepare packages
;;==========================
(require 'package)
(setq package-archives '(("melpa" . "http://melpa.org/packages/")
                         ("gnu" . "http://elpa.gnu.org/packages/")))

(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents)
  (dolist (p '(ansible
               elixir-mode
               flymake-eslint
               geiser
               groovy-mode
               jinja2-mode
               magit
               markdown-mode
               kotlin-mode
               racket-mode
               sass-mode
               terraform-mode
               tuareg
               use-package))
    (unless (package-installed-p p)
      (package-install p))))

;;==========================
;; Use Package - Always load & configure all below
;;==========================
(require 'use-package)
(setq load-prefer-newer t
      use-package-always-ensure t)

;;==========================
;; Regex + info.
;;==========================
(use-package anzu
  :init (global-anzu-mode t))

;;==========================
;; Clojure - Repl + Main mode
;;==========================
(use-package clojure-mode
  :config (progn
            (setq clojure-align-forms-automatically t)))

(use-package cider
  :config (progn
            (setq nrepl-hide-special-buffers t
                  cider-prompt-save-file-on-load nil
                  cider-refresh-after-fn "integrant.repl/resume"
                  cider-refresh-before-fn "integrant.repl/suspend"
                  cider-repl-display-help-banner nil
                  cider-repl-use-pretty-printing t)))

(defun jack-in-with-profile ()
  "Allow choice of profile to load while starting cider."
  (interactive)
  (letrec ((profile (read-string "Profiles: "))
           (lein-params (concat "with-profile +" profile " repl :headless")))
    (set-variable 'cider-lein-parameters lein-params)
    (cider-jack-in)))

;;==========================
;; Company mode - Autocompletion
;;==========================
(use-package company
  :diminish t
  :bind (("C-c C-c" . company-complete))
  :init (global-company-mode t)
  :config (progn
            (setq ;; Only 2 letters required for completion to activate.
             company-minimum-prefix-length 2

             ;; Search other buffers for completion candidates
             company-dabbrev-other-buffers t
             company-dabbrev-code-other-buffers t
             company-complete-number t
             company-dabbrev-downcase nil
             company-dabbrev-ignore-case t

             ;; Immediately activate completion.
             company-idle-delay 0)
            (define-key company-active-map (kbd "TAB") #'company-complete-selection)
            (define-key company-active-map (kbd "SPC") nil)
            (setq company-auto-complete-chars nil)))

(use-package company-lsp
  :ensure t
  :after company lsp-mode
  :init (push 'company-lsp company-backends))

;;==========================
;; Exec path from shell
;;==========================
(use-package dockerfile-mode
  :mode (("Dockerfile\\'" . dockerfile-mode)))

;;==========================
;; Exec path bla ...Cheat on env.
;;==========================
(use-package exec-path-from-shell
  :init (exec-path-from-shell-initialize)
  :config (progn
            (setenv "PATH" (concat (getenv "PATH") ":/opt/racket/bin:/home/{{ ssh.user }}/bin"))
            (setq exec-path (append exec-path '("/opt/racket/bin" "/home/{{ ssh.user }}/bin")))))

;;==========================
;; Flycheck - Syntax checker
;;==========================
(use-package flycheck
  :config (progn
            (add-hook 'js2-mode-hook #'loljs/force-eslint)
            (add-hook 'flycheck-mode-hook #'loljs/local-eslint))
  :hook ((prog-mode . flycheck-mode)))

;;==========================
;; Git Gutter - Hunk annotation
;;==========================
(use-package git-gutter
  :init (global-git-gutter-mode t))

;;==========================
;; GO - Golang mode
;;==========================
(use-package go-mode
  :mode (("\\.go\\'" . go-mode)))

;;==========================
;; GraphQL - Kind of useless
;;==========================
(use-package graphql-mode
  :mode (("\\.gql\\'" . graphql-mode)
         ("\\.graphql\\'" . graphql-mode)))

;;==========================
;; IDO - Fbuff AC w/ fuzzy
;;==========================
(use-package ido
  :init (ido-mode))

(use-package flx-ido
  :config (flx-ido-mode t))

;;==========================
;; Javascript, Typescript &
;; other syntaxes that make
;; me cry.
;;==========================

(defun loljs/force-eslint ()
  "Flycheck gets confused if we don't specify explicit checker."
  (flycheck-mode t)
  (flycheck-select-checker 'javascript-eslint))

(defun loljs/local-eslint ()
  "Use project version of eslint if one is available."
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (eslint
          (and root
               (expand-file-name "node_modules/.bin/eslint"
                                 root))))
    (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))

(use-package js2-mode
  :mode (("\\.js\\'" . js2-mode)))

(use-package rjsx-mode
  :mode (("\\.jsx\\'" . rjsx-mode)))

(use-package typescript-mode
  :mode (("\\.tsx?\\'" . typescript-mode)))

;;==========================
;; JSON - JSON mode. Advanced features with lsp.
;;==========================
(use-package json-mode
  :mode (("\\.json\\'" . json-mode)))

;;==========================
;; Dart mode w/ lsp
;;==========================
(use-package lsp-dart
  :ensure t
  :hook (dart-mode . lsp))

;;==========================
;; Haskell major w/ pp
;;==========================
(use-package haskell-mode
  :mode (("\\.hs\\'" . haskell-mode)))

(use-package hindent
  :hook ((haskell-mode . hindent)))

;;==========================
;; HELM - Project context.
;;==========================
(use-package helm
  :config (progn
            (require 'helm-config)
            (setq  helm-display-header-line nil
                   helm-split-window-in-side-p t
                   helm-autoresize-max-height 30
                   helm-autoresize-min-height 30))
  :init (helm-mode 1))

(use-package helm-ag
  :config (progn
            (setq helm-ag-use-agignore t)))

(use-package helm-projectile
  :bind (("C-x h" . helm-projectile-find-file)
         ("C-x r" . helm-projectile-ag))
  :config (progn
            (setq projectile-completion-system 'helm
                  projectile-enable-caching nil)
            (helm-projectile-on))
  :init (projectile-global-mode t))

(use-package helm-lsp
  :commands helm-lsp-workspace-symbol)

;;==========================
;; LSP - Used for:
;; - Clojure
;; - Go
;; - Rust
;;==========================
(defun lsp-format-hooks ()
  "Explicit on save hooks for LSP Golang."
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :config (progn
            ;; Clojure
            (dolist (m '(clojure-mode
                         clojurescript-mode))
              (add-to-list 'lsp-language-id-configuration `(,m . "clojure")))

            ;; Golang
            (add-hook 'go-mode-hook #'lsp-format-hooks)
            (add-hook 'scala-mode-hook #'lsp-format-hooks)
            )
  :custom (
           ;; Clojure
           (lsp-clojure-server-command '("java" "-jar" "/home/{{ ssh.user }}/bin/clj-kondo-lsp"))

           )
  :hook ((clojure-mode . lsp)
         (go-mode . lsp-deferred)
         (rust-mode . lsp)
         (scala-mode . lsp)
         (typescript-mode . lsp-deferred)))

(use-package lsp-ui
  :commands lsp-ui-mode)

(use-package prettier-js
  :diminish t
  :hook ((typescript-mode . prettier-js-mode)
         (rjsx-mode . prettier-js-mode)))

;;==========================
;; Paredit - Delimiter balancing.
;;==========================
(use-package paredit
  :diminish t
  :hook ((clojure-mode . paredit-mode)
         (emacs-lisp-mode . paredit-mode)
         (lisp-mode . paredit-mode)))

;;==========================
;; Rainbow delimiters - Delimiter highlights
;;==========================
(use-package rainbow-delimiters
  :config (progn
            ;; (set-face-attribute 'rainbow-delimiters-depth-1-face nil
            ;;                     :weight 'bold)
            ;; (set-face-foreground 'rainbow-delimiters-depth-2-face "cyan")
            ;; (set-face-foreground 'rainbow-delimiters-depth-3-face "yellow")
            ;; (set-face-foreground 'rainbow-delimiters-depth-4-face "green")
            ;; (set-face-foreground 'rainbow-delimiters-depth-5-face "orange")
            ;; (set-face-foreground 'rainbow-delimiters-depth-6-face "purple")
            ;; (set-face-foreground 'rainbow-delimiters-depth-7-face "white")
            ;; (set-face-foreground 'rainbow-delimiters-depth-8-face "cyan")
            ;; (set-face-foreground 'rainbow-delimiters-depth-9-face "yellow")
            ;; (set-face-foreground 'rainbow-delimiters-unmatched-face "red")
            ;; (set-face-background 'rainbow-delimiters-unmatched-face "red")
            )
  :hook ((prog-mode . rainbow-delimiters-mode)))


;;==========================
;; Rust major
;;==========================
(use-package rust-mode
  :mode (("\\.rs\\'" . rust-mode)))

(use-package scala-mode
  :interpreter
    ("scala" . scala-mode))

(use-package lsp-metals
  :config (setq lsp-metals-treeview-show-when-views-received t))

;;==========================
;; SMEX
;;==========================
(use-package smex
  :config (progn
            (smex-initialize))
  :bind (("M-x" . smex)))

;;==========================
;; Colors & Theming
;;==========================
(use-package spacemacs-theme
  :defer t
  :init (load-theme 'spacemacs-dark t))

;;==========================
;; Visual fill column - Wrap columns on setting, not screen
;;==========================
;; (use-package visual-fill-column
;;   :init (global-visual-fill-column-mode)
;;   :config (progn
;;             (setq-default fill-column 79)))

;;==========================
;; YAML
;;==========================
(use-package yaml-mode)

;;==========================
;; Yasnippet - Textual snippets
;;==========================
(use-package yasnippet
  :init (yas-global-mode t))

;;==========================
;; Global
;;==========================

(setq-default
 auto-save-default nil
 initial-scratch-message ""
 inhibit-startup-screen t
 inhibit-splash-screen t
 make-backup-files nil
 ring-bell-function 'ignore
 truncate-lines t)

(setq-default
 indent-tabs-mode nil
 tab-width 4
 c-basic-offset 4
 c-basic-indent 4
 js-indent-level 4
 typescript-indent-level 4
 sgml-basic-offset 4)

;; Enable features
(dolist (m '(column-number-mode
             electric-pair-mode
             global-prettify-symbols-mode
             show-paren-mode))
  (funcall m 1))

;; Disable features
(dolist (m '(menu-bar-mode
             tool-bar-mode
             scroll-bar-mode))
  (funcall m -1))

(add-hook 'before-save-hook 'delete-trailing-whitespace)

;;; init.el ends here
